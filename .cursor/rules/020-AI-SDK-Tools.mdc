---
description: AI SDK Tool Implementation Patterns
globs: "lib/ai/tools/**/*.ts"
---

# AI SDK Tool Implementation Patterns

## Tool Structure Pattern

Follow this consistent pattern for all AI SDK tools:

```typescript
import { z } from 'zod';
import { getNeo4jDriver, neo4j } from '../../neo4j/driver';
import { serializeNeo4j } from '../../neo4j/serializer';

export const toolName = {
  description: "Clear description of what the tool does",
  parameters: z.object({
    // Define parameters with proper descriptions
    param1: z.string().describe("Description of parameter 1"),
    param2: z.number().int().min(1).max(100).default(10)
      .describe("Description of parameter 2"),
    // Add more parameters as needed
  }),
  execute: async function({ param1, param2 }) {
    // Get Neo4j session directly
    const session = getNeo4jDriver().session({ defaultAccessMode: neo4j.session.READ }); // or WRITE
    
    try {
      // Implement tool logic
      const result = await session.run(/* query */);
      
      // Process and return results
      return {
        // Return structured results
      };
    } catch (error) {
      console.error(`Tool execution failed: ${(error as Error).message}`, error);
      throw new Error(`Failed to execute tool: ${(error as Error).message}`);
    } finally {
      await session.close(); // Always close the session
    }
  }
};
```

## Parameter Definition Best Practices

Use Zod schemas for parameter validation with proper descriptions:

```typescript
parameters: z.object({
  // String parameters
  queryText: z.string().describe("The text query to find relevant information"),
  
  // Optional parameters with defaults
  limit: z.number().int().min(1).max(50).default(10)
    .describe("Maximum number of results to return"),
  
  // Enum parameters
  nodeTypes: z.array(
    z.enum(["Thought", "ReasoningChain", "Person", "Concept", "Entity", "Proposition"])
  ).optional().describe("Types of nodes to search (defaults to all)"),
  
  // Enum with specific values
  extractionDepth: z.enum(["minimal", "standard", "deep"]).default("standard")
    .describe("Level of detail for extraction")
});
```

## Core Tools

### Semantic Retrieval Tool

Located at [lib/ai/tools/semanticRetrieval.ts](mdc:lib/ai/tools/semanticRetrieval.ts), this tool uses vector embeddings to find semantically similar nodes in the knowledge graph.

### Graph Node Extraction Tool

Located at [lib/ai/tools/extractGraphNodes.ts](mdc:lib/ai/tools/extractGraphNodes.ts), this tool extracts entities, concepts, and relationships from conversation messages.

## Error Handling

Implement consistent error handling in all tools:

```typescript
try {
  // Tool implementation
} catch (error) {
  // 1. Log the error with context
  console.error(`Error in ${toolName}: ${(error as Error).message}`, {
    parameters: { param1, param2 },
    stack: (error as Error).stack
  });
  
  // 2. Throw a user-friendly error
  if ((error as any).code === 'Neo.ClientError.Schema.ConstraintValidationFailed') {
    throw new Error('This entity already exists in the database');
  } else if ((error as any).code?.startsWith('Neo.ClientError')) {
    throw new Error(`Database error: ${(error as Error).message}`);
  } else {
    throw new Error(`Failed to execute tool: ${(error as Error).message}`);
  }
} finally {
  // 3. Always close resources
  await session.close();
}
```

## Research Agent Implementation

Implement research agents with the orchestrator-worker pattern:

```typescript
class ResearchOrchestrator {
  constructor({ query, tools, reasoningModel, standardModel }) {
    this.query = query;
    this.tools = tools;
    this.reasoningModel = reasoningModel;
    this.standardModel = standardModel;
    this.subQueries = [];
    this.results = [];
  }
  
  async conductResearch() {
    // Ask clarification questions first
    const clarificationQuestions = await this.generateClarificationQuestions();
    
    // Wait for user responses
    
    // Break down into sub-queries
    this.subQueries = await this.generateSubQueries();
    
    // Process each sub-query
    for (const subQuery of this.subQueries) {
      // Get context from knowledge graph and web
      const graphContext = await this.retrieveFromGraph(subQuery);
      const webContext = await this.searchWeb(subQuery);
      
      // Process with reasoning model and store results
      // ...
    }
    
    // Return final synthesis
    return this.synthesizeFinalResponse();
  }
}
```

## Future Tools (Phase 2)

The following tools are planned for Phase 2 implementation:

1. **Person Centrality Tool** - Analyze network centrality metrics for Person nodes
2. **Community Detection Tool** - Identify communities in the knowledge graph
3. **Bridging Concepts Tool** - Find concepts that connect different domains
4. **Concept Neighborhood Tool** - Explore the neighborhood of a concept
5. **Reasoning Chain Exploration Tool** - Analyze reasoning chains and their steps
6. **Concept-Reasoning Connection Tool** - Find connections between concepts and reasoning